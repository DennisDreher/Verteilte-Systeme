Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, ist ihr Inhalt ebenfalls Geschichte. Damit Sie auf Ihre Daten auch morgen noch kraftvoll zugreifen können, empfiehlt es sich, diese in einer Datei abzulegen. Dazu können Sie die Daten als Ausgabestrom in die Datei schreiben. Das Vorgehen entspricht dem bei der Bildschirmausgabe per cout. Diese Form wird sequenziell genannt, weil die Daten nacheinander in der Reihenfolge, wie sie geschrieben wurden, in der Datei landen. Sie können aber auch einen Datenblock an eine beliebige Stelle der Datei schreiben. Später können Sie diesen Datenblock wieder zurückholen, indem Sie den internen Dateizeiger an diese Stelle positionieren und den Datenblock wieder lesen. Diese Vorgehensweise ist typisch für Klassen, insbesondere, wenn sie in irgendeiner Form sortiert abgelegt werden sollen.
fstream
Für die Dateioperationen werden Objekte der Klasse fstream verwendet. Wird in die Datei nur geschrieben, kann stattdessen die Klasse ofstream verwendet werden. Für reine Eingabedateien bietet sich die Klasse ifstream an. Auf die Objekte dieser Klassen können Ein- und Ausgabeoperatoren (>> und <<) angewandt werden. Vor einem Zugriff muss die Datei mit der Elementfunktion open() geöffnet werden. Sie können die Aufgabe des Öffnens auch dem Konstruktor der fstream-Klasse überlassen, indem Sie dem Objekt bei ihrer Definition den Dateinamen als Parameter übergeben. Nach der Bearbeitung der Datei muss sie wieder mit der Elementfunktion close() geschlossen werden. Diese Aufgabe übernimmt aber auch automatisch der Destruktor, so dass Sie close() nur dann aufrufen müssen, wenn Sie eine Datei schließen wollen, bevor das Objekt aufgelöst wird. 
Programme speichern ihre Informationen in Variablen. Leider bleiben diese immer nur bis zum nächsten Stromausfall oder Betriebssystemabsturz erhalten. Und wenn das Programm verlassen wird, 

