// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "time.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Test;

class timeHandler : virtual public timeIf {
 public:
  timeHandler() {
    // Your initialization goes here
  }

  void FileUpload(const std::string& fileText) {
    // Your implementation goes here
	std::fstream fdown;
	fdown.open("/home/debian/1 - Verteilte Systeme/Termin 4/04/download.txt", std::ios::out|std::ios::app);
	fdown << fileText;
	fdown.close();
    printf("100 Zeichen gesendet\n");
  }

  int32_t GetFileSize() {
    // Your implementation goes here
	std::fstream fdown;
	fdown.open("/home/debian/1 - Verteilte Systeme/Termin 4/04/download.txt", std::ios::out|std::ios::app);
	fdown.seekg(0, fdown.end);
	int size = fdown.tellg();
	fdown.seekg(0, fdown.beg),
	fdown.close();	
    printf("GetFileSize\n");
	return size;

  }

  void FileUpload2(const std::string& fileText) {
    // Your implementation goes here
	std::fstream fdown;
	fdown.open("/home/debian/1 - Verteilte Systeme/Termin 4/04/download2.txt", std::ios::out|std::ios::app);
	fdown << fileText;
	fdown.close();
    printf("135 Zeichen gesendet\n");
  }

  int32_t GetFileSize2() {
    // Your implementation goes here
	std::fstream fdown;
	fdown.open("/home/debian/1 - Verteilte Systeme/Termin 4/04/download2.txt", std::ios::out|std::ios::app);
	fdown.seekg(0, fdown.end);
	int size = fdown.tellg();
	fdown.seekg(0, fdown.beg),
	fdown.close();	
    printf("GetFileSize\n");
	return size;
  }

};

int main(int argc, char **argv) {
  int port = 12345;
  shared_ptr<timeHandler> handler(new timeHandler());
  shared_ptr<TProcessor> processor(new timeProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

