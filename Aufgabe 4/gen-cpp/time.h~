/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef time_H
#define time_H

#include <thrift/TDispatchProcessor.h>
#include "your_thrift_file_types.h"

namespace Test {

class timeIf {
 public:
  virtual ~timeIf() {}
  virtual void FileUpload(const std::string& fileText) = 0;
  virtual int32_t GetFileSize() = 0;
  virtual void FileUpload2(const std::string& fileText) = 0;
  virtual int32_t GetFileSize2() = 0;
};

class timeIfFactory {
 public:
  typedef timeIf Handler;

  virtual ~timeIfFactory() {}

  virtual timeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(timeIf* /* handler */) = 0;
};

class timeIfSingletonFactory : virtual public timeIfFactory {
 public:
  timeIfSingletonFactory(const boost::shared_ptr<timeIf>& iface) : iface_(iface) {}
  virtual ~timeIfSingletonFactory() {}

  virtual timeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(timeIf* /* handler */) {}

 protected:
  boost::shared_ptr<timeIf> iface_;
};

class timeNull : virtual public timeIf {
 public:
  virtual ~timeNull() {}
  void FileUpload(const std::string& /* fileText */) {
    return;
  }
  int32_t GetFileSize() {
    int32_t _return = 0;
    return _return;
  }
  void FileUpload2(const std::string& /* fileText */) {
    return;
  }
  int32_t GetFileSize2() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _time_FileUpload_args__isset {
  _time_FileUpload_args__isset() : fileText(false) {}
  bool fileText;
} _time_FileUpload_args__isset;

class time_FileUpload_args {
 public:

  time_FileUpload_args() : fileText() {
  }

  virtual ~time_FileUpload_args() throw() {}

  std::string fileText;

  _time_FileUpload_args__isset __isset;

  void __set_fileText(const std::string& val) {
    fileText = val;
  }

  bool operator == (const time_FileUpload_args & rhs) const
  {
    if (!(fileText == rhs.fileText))
      return false;
    return true;
  }
  bool operator != (const time_FileUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_FileUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_FileUpload_pargs {
 public:


  virtual ~time_FileUpload_pargs() throw() {}

  const std::string* fileText;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_FileUpload_result {
 public:

  time_FileUpload_result() {
  }

  virtual ~time_FileUpload_result() throw() {}


  bool operator == (const time_FileUpload_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const time_FileUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_FileUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_FileUpload_presult {
 public:


  virtual ~time_FileUpload_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class time_GetFileSize_args {
 public:

  time_GetFileSize_args() {
  }

  virtual ~time_GetFileSize_args() throw() {}


  bool operator == (const time_GetFileSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const time_GetFileSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_GetFileSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_GetFileSize_pargs {
 public:


  virtual ~time_GetFileSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _time_GetFileSize_result__isset {
  _time_GetFileSize_result__isset() : success(false) {}
  bool success;
} _time_GetFileSize_result__isset;

class time_GetFileSize_result {
 public:

  time_GetFileSize_result() : success(0) {
  }

  virtual ~time_GetFileSize_result() throw() {}

  int32_t success;

  _time_GetFileSize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const time_GetFileSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const time_GetFileSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_GetFileSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _time_GetFileSize_presult__isset {
  _time_GetFileSize_presult__isset() : success(false) {}
  bool success;
} _time_GetFileSize_presult__isset;

class time_GetFileSize_presult {
 public:


  virtual ~time_GetFileSize_presult() throw() {}

  int32_t* success;

  _time_GetFileSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _time_FileUpload2_args__isset {
  _time_FileUpload2_args__isset() : fileText(false) {}
  bool fileText;
} _time_FileUpload2_args__isset;

class time_FileUpload2_args {
 public:

  time_FileUpload2_args() : fileText() {
  }

  virtual ~time_FileUpload2_args() throw() {}

  std::string fileText;

  _time_FileUpload2_args__isset __isset;

  void __set_fileText(const std::string& val) {
    fileText = val;
  }

  bool operator == (const time_FileUpload2_args & rhs) const
  {
    if (!(fileText == rhs.fileText))
      return false;
    return true;
  }
  bool operator != (const time_FileUpload2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_FileUpload2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_FileUpload2_pargs {
 public:


  virtual ~time_FileUpload2_pargs() throw() {}

  const std::string* fileText;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_FileUpload2_result {
 public:

  time_FileUpload2_result() {
  }

  virtual ~time_FileUpload2_result() throw() {}


  bool operator == (const time_FileUpload2_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const time_FileUpload2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_FileUpload2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_FileUpload2_presult {
 public:


  virtual ~time_FileUpload2_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class time_GetFileSize2_args {
 public:

  time_GetFileSize2_args() {
  }

  virtual ~time_GetFileSize2_args() throw() {}


  bool operator == (const time_GetFileSize2_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const time_GetFileSize2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_GetFileSize2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class time_GetFileSize2_pargs {
 public:


  virtual ~time_GetFileSize2_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _time_GetFileSize2_result__isset {
  _time_GetFileSize2_result__isset() : success(false) {}
  bool success;
} _time_GetFileSize2_result__isset;

class time_GetFileSize2_result {
 public:

  time_GetFileSize2_result() : success(0) {
  }

  virtual ~time_GetFileSize2_result() throw() {}

  int32_t success;

  _time_GetFileSize2_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const time_GetFileSize2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const time_GetFileSize2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const time_GetFileSize2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _time_GetFileSize2_presult__isset {
  _time_GetFileSize2_presult__isset() : success(false) {}
  bool success;
} _time_GetFileSize2_presult__isset;

class time_GetFileSize2_presult {
 public:


  virtual ~time_GetFileSize2_presult() throw() {}

  int32_t* success;

  _time_GetFileSize2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class timeClient : virtual public timeIf {
 public:
  timeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  timeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void FileUpload(const std::string& fileText);
  void send_FileUpload(const std::string& fileText);
  void recv_FileUpload();
  int32_t GetFileSize();
  void send_GetFileSize();
  int32_t recv_GetFileSize();
  void FileUpload2(const std::string& fileText);
  void send_FileUpload2(const std::string& fileText);
  void recv_FileUpload2();
  int32_t GetFileSize2();
  void send_GetFileSize2();
  int32_t recv_GetFileSize2();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class timeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<timeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (timeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_FileUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFileSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FileUpload2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFileSize2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  timeProcessor(boost::shared_ptr<timeIf> iface) :
    iface_(iface) {
    processMap_["FileUpload"] = &timeProcessor::process_FileUpload;
    processMap_["GetFileSize"] = &timeProcessor::process_GetFileSize;
    processMap_["FileUpload2"] = &timeProcessor::process_FileUpload2;
    processMap_["GetFileSize2"] = &timeProcessor::process_GetFileSize2;
  }

  virtual ~timeProcessor() {}
};

class timeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  timeProcessorFactory(const ::boost::shared_ptr< timeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< timeIfFactory > handlerFactory_;
};

class timeMultiface : virtual public timeIf {
 public:
  timeMultiface(std::vector<boost::shared_ptr<timeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~timeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<timeIf> > ifaces_;
  timeMultiface() {}
  void add(boost::shared_ptr<timeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void FileUpload(const std::string& fileText) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FileUpload(fileText);
    }
    ifaces_[i]->FileUpload(fileText);
  }

  int32_t GetFileSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFileSize();
    }
    return ifaces_[i]->GetFileSize();
  }

  void FileUpload2(const std::string& fileText) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FileUpload2(fileText);
    }
    ifaces_[i]->FileUpload2(fileText);
  }

  int32_t GetFileSize2() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFileSize2();
    }
    return ifaces_[i]->GetFileSize2();
  }

};

} // namespace

#endif
