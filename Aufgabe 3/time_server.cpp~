// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "time.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Test;

class timeHandler : virtual public timeIf {
 public:
  timeHandler() {
    // Your initialization goes here
  }

  int32_t ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void ZeitausgabeS(std::string& _return) {
    // Your implementation goes here
	char buffer[80];

	struct tm *newtime;
	time_t currenttime;

	time(&currenttime);
    newtime = localtime(&currenttime);

	//printf("%d-%m-%Y %I:%M:%S", newtime);

	//time_t result = time(nullptr);
	time_t result = time(0);

	strftime(buffer,80,"%d-%m-%Y %I:%M:%S", newtime);
	string str(buffer);
	cout << str;
	_return = str;
	//cout<< "-------" << result << endl;
    //printf("ZeitausgabeS\n");
  }

  void ZeitausgabeU(std::string& _return) {
    // Your implementation goes here
char buffer[80];

	struct tm *newtime;
	time_t currenttime;

	time(&currenttime);
    newtime = localtime(&currenttime);

	

	//time_t result = time(nullptr);
	time_t result = time(0);

	stringstream strs;
    strs << result;
    string temp_str = strs.str();
	_return = temp_str;

    //printf("ZeitausgabeU\n");
  }

};

int main(int argc, char **argv) {
  int port = 12345;
  shared_ptr<timeHandler> handler(new timeHandler());
  shared_ptr<TProcessor> processor(new timeProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

